{"version":3,"file":"TermFunctionReplace.js","sourceRoot":"","sources":["TermFunctionReplace.ts"],"names":[],"mappings":";;;AAAA,yEAAkE;AAMlE,qFAM8C;AAE9C;;GAEG;AACH,MAAa,mBAAoB,SAAQ,uCAAgB;IACvD;QACE,KAAK,CAAC;YACJ,KAAK,EAAE,CAAE,CAAC,EAAE,CAAC,CAAE;YACf,QAAQ,EAAE,2CAAc,CAAC,OAAO;YAChC,SAAS,EAAE,IAAA,oCAAO,EAAC,2CAAc,CAAC,OAAO,CAAC;iBACvC,cAAc,CACb,CAAE,oCAAO,CAAC,UAAU,EAAE,oCAAO,CAAC,UAAU,EAAE,oCAAO,CAAC,UAAU,CAAE,EAC9D,GAAG,EAAE,CAAC,CAAC,GAAW,EAAE,OAAe,EAAE,WAAmB,EAAE,EAAE,CAC1D,IAAA,mCAAM,EAAC,mBAAmB,CAAC,OAAO,CAAC,GAAG,EAAE,OAAO,EAAE,WAAW,CAAC,CAAC,CACjE;iBACA,GAAG,CACF,CAAE,oCAAO,CAAC,eAAe,EAAE,oCAAO,CAAC,UAAU,EAAE,oCAAO,CAAC,UAAU,CAAE,EACnE,GAAG,EAAE,CAAC,CAAC,CAAE,GAAG,EAAE,OAAO,EAAE,WAAW,CAAqD,EAAE,EAAE;gBACzF,MAAM,MAAM,GAAG,mBAAmB,CAAC,OAAO,CAAC,GAAG,CAAC,UAAU,EAAE,OAAO,CAAC,UAAU,EAAE,WAAW,CAAC,UAAU,CAAC,CAAC;gBACvG,OAAO,IAAA,uCAAU,EAAC,MAAM,EAAE,GAAG,CAAC,QAAQ,CAAC,CAAC;YAC1C,CAAC,CACF;iBACA,iBAAiB,CAChB,CAAE,oCAAO,CAAC,UAAU,EAAE,oCAAO,CAAC,UAAU,EAAE,oCAAO,CAAC,UAAU,EAAE,oCAAO,CAAC,UAAU,CAAE,EAClF,GAAG,EAAE,CAAC,CAAC,GAAW,EAAE,OAAe,EAAE,WAAmB,EAAE,KAAa,EAAE,EAAE,CACzE,IAAA,mCAAM,EAAC,mBAAmB,CAAC,OAAO,CAAC,GAAG,EAAE,OAAO,EAAE,WAAW,EAAE,KAAK,CAAC,CAAC,CACxE;iBACA,GAAG,CACF,CAAE,oCAAO,CAAC,eAAe,EAAE,oCAAO,CAAC,UAAU,EAAE,oCAAO,CAAC,UAAU,EAAE,oCAAO,CAAC,UAAU,CAAE,EACvF,GAAG,EAAE,CAAC,CAAC,CAAE,GAAG,EAAE,OAAO,EAAE,WAAW,EAAE,KAAK,CACuB,EAAE,EAAE;gBAClE,MAAM,MAAM,GAAG,mBAAmB,CAAC,OAAO,CACxC,GAAG,CAAC,UAAU,EACd,OAAO,CAAC,UAAU,EAClB,WAAW,CAAC,UAAU,EACtB,KAAK,CAAC,UAAU,CACjB,CAAC;gBACF,OAAO,IAAA,uCAAU,EAAC,MAAM,EAAE,GAAG,CAAC,QAAQ,CAAC,CAAC;YAC1C,CAAC,CACF;iBACA,OAAO,EAAE;SACb,CAAC,CAAC;IACL,CAAC;IAED,kBAAkB;IAClB,sDAAsD;IAC9C,MAAM,CAAC,OAAO,CAAC,GAAW,EAAE,OAAe,EAAE,WAAmB,EAAE,KAAc;QACtF,IAAI,GAAG,GAAG,IAAI,MAAM,CAAC,OAAO,EAAE,KAAK,CAAC,CAAC;QACrC,IAAI,CAAC,GAAG,CAAC,MAAM,EAAE,CAAC;YAChB,MAAM,MAAM,GAAG,KAAK,IAAI,EAAE,CAAC;YAC3B,GAAG,GAAG,IAAI,MAAM,CAAC,OAAO,EAAE,GAAG,MAAM,GAAG,CAAC,CAAC;QAC1C,CAAC;QACD,OAAO,GAAG,CAAC,OAAO,CAAC,GAAG,EAAE,WAAW,CAAC,CAAC;IACvC,CAAC;CACF;AAlDD,kDAkDC","sourcesContent":["import { TermFunctionBase } from '@comunica/bus-function-factory';\nimport type {\n  StringLiteral,\n\n  LangStringLiteral,\n} from '@comunica/utils-expression-evaluator';\nimport {\n  declare,\n  langString,\n  SparqlOperator,\n  string,\n  TypeURL,\n} from '@comunica/utils-expression-evaluator';\n\n/**\n * https://www.w3.org/TR/sparql11-query/#func-replace\n */\nexport class TermFunctionReplace extends TermFunctionBase {\n  public constructor() {\n    super({\n      arity: [ 3, 4 ],\n      operator: SparqlOperator.REPLACE,\n      overloads: declare(SparqlOperator.REPLACE)\n        .onTernaryTyped(\n          [ TypeURL.XSD_STRING, TypeURL.XSD_STRING, TypeURL.XSD_STRING ],\n          () => (arg: string, pattern: string, replacement: string) =>\n            string(TermFunctionReplace.replace(arg, pattern, replacement)),\n        )\n        .set(\n          [ TypeURL.RDF_LANG_STRING, TypeURL.XSD_STRING, TypeURL.XSD_STRING ],\n          () => ([ arg, pattern, replacement ]: [LangStringLiteral, StringLiteral, StringLiteral]) => {\n            const result = TermFunctionReplace.replace(arg.typedValue, pattern.typedValue, replacement.typedValue);\n            return langString(result, arg.language);\n          },\n        )\n        .onQuaternaryTyped(\n          [ TypeURL.XSD_STRING, TypeURL.XSD_STRING, TypeURL.XSD_STRING, TypeURL.XSD_STRING ],\n          () => (arg: string, pattern: string, replacement: string, flags: string) =>\n            string(TermFunctionReplace.replace(arg, pattern, replacement, flags)),\n        )\n        .set(\n          [ TypeURL.RDF_LANG_STRING, TypeURL.XSD_STRING, TypeURL.XSD_STRING, TypeURL.XSD_STRING ],\n          () => ([ arg, pattern, replacement, flags ]:\n          [LangStringLiteral, StringLiteral, StringLiteral, StringLiteral]) => {\n            const result = TermFunctionReplace.replace(\n              arg.typedValue,\n              pattern.typedValue,\n              replacement.typedValue,\n              flags.typedValue,\n            );\n            return langString(result, arg.language);\n          },\n        )\n        .collect(),\n    });\n  }\n\n  // TODO: Fix flags\n  // https://www.w3.org/TR/xpath-functions/#func-replace\n  private static replace(arg: string, pattern: string, replacement: string, flags?: string): string {\n    let reg = new RegExp(pattern, flags);\n    if (!reg.global) {\n      const flags_ = flags ?? '';\n      reg = new RegExp(pattern, `${flags_}g`);\n    }\n    return arg.replace(reg, replacement);\n  }\n}\n"]}