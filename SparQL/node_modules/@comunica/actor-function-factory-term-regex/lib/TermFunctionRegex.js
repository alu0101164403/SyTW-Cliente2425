"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.TermFunctionRegex = void 0;
const bus_function_factory_1 = require("@comunica/bus-function-factory");
const utils_expression_evaluator_1 = require("@comunica/utils-expression-evaluator");
/**
 * https://www.w3.org/TR/sparql11-query/#func-regex
 */
class TermFunctionRegex extends bus_function_factory_1.TermFunctionBase {
    constructor() {
        super({
            arity: [2, 3],
            operator: utils_expression_evaluator_1.SparqlOperator.REGEX,
            overloads: (0, utils_expression_evaluator_1.declare)(utils_expression_evaluator_1.SparqlOperator.REGEX)
                .onBinaryTyped([utils_expression_evaluator_1.TypeAlias.SPARQL_STRINGLY, utils_expression_evaluator_1.TypeURL.XSD_STRING], TermFunctionRegex.regex2)
                .onTernaryTyped([utils_expression_evaluator_1.TypeAlias.SPARQL_STRINGLY, utils_expression_evaluator_1.TypeURL.XSD_STRING, utils_expression_evaluator_1.TypeURL.XSD_STRING], TermFunctionRegex.regex3)
                .collect(),
        });
    }
    // https://www.w3.org/TR/xpath-functions/#func-matches
    // https://www.w3.org/TR/xpath-functions/#flags
    static matches(text, pattern, flags) {
        // TODO: Only flags 'i' and 'm' match between XPath and JS.
        // 's', 'x', 'q', would need proper implementation.
        const reg = new RegExp(pattern, flags);
        return reg.test(text);
    }
    static regex2() {
        return (text, pattern) => (0, utils_expression_evaluator_1.bool)(TermFunctionRegex.matches(text, pattern));
    }
    static regex3() {
        return (text, pattern, flags) => (0, utils_expression_evaluator_1.bool)(TermFunctionRegex.matches(text, pattern, flags));
    }
}
exports.TermFunctionRegex = TermFunctionRegex;
//# sourceMappingURL=TermFunctionRegex.js.map